import pandas as pd
from pydantic import BaseModel, Field
from typing_extensions import TypedDict


class SQLCreator(BaseModel):
    sql_query: str = Field(description="The SQL query generated by Assistant.")

    @property
    def persona(self) -> str:
        return f"SQL Query: {self.sql_query}"


class SQLQuery(BaseModel):
    sql_query: str


class VisualizationRecommender(BaseModel):
    recommended_visualization: list
    description: str


class VisualizationStatus(BaseModel):
    visualization_status: bool
    selected_visualization_types: list


class GenerateSQLCreatorState(TypedDict):
    messages: str
    user_info: dict[str, str]
    selected_databases: list[dict]
    sql_queries: SQLCreator
    sql_data: dict[str, list[str]]
    initially_recommended_visualization: str
    recommended_visualization: list
    tables_columns_validation_status: bool = True
    query_execution_validation_status: bool = True
    schema_error_message: str
    execution_error_message: str
    count: int
    count_for_visualization: int
    dataframe: pd.DataFrame
    human_analyst_feedback: str
    status_enough_feedback: bool = False
